
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users: Public read for leaderboard, but only owners can write.
    match /users/{userId} {
      allow read: if true;
      allow create, update: if request.auth != null && request.auth.uid == userId;
      allow delete: if false; // Deletion should be handled by a backend function
    }

    // Articles, Insights: Publicly readable, but not writable from the client.
    // These are managed by the admin dashboard.
    match /articles/{articleId} {
      allow read: if true;
      allow write: if false;
    }
    match /insights/{insightId} {
      allow read: if true;
      allow write: if false;
    }
    
    // Daily Topics: Public read, no client write. Admin manages this.
    match /dailyTopics/{topicId} {
      allow read: if true;
      allow write: if false;
    }

    // Feed Items: Publicly readable. Writable by authenticated users.
    match /feedItems/{itemId} {
      allow read: if true;
      // Allow creation if the user is logged in and the post is their own.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Allow updates (like, comment count) by any logged-in user for engagement.
      allow update: if request.auth != null;
      // Only the user who created the post can delete it.
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    // Comments on feedItems
    match /feedItems/{itemId}/comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update, delete: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    // Comments on dailyTopics
    match /dailyTopics/{topicId}/comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update, delete: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    // Likes: Users can only create/delete their own like documents.
    match /likes/{likeId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
  }
}
